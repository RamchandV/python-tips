# decorator is same as following:
def my_decorator(some_function):  # accept a func (decorated one) & return a func (the resulting one)
    def wrapper():
        print("Something is happening before some_function() is called.")
        some_function()
        print("Something is happening after some_function() is called.")
    return wrapper

def just_some_function():
    print("Wheee!")

just_some_function = my_decorator(just_some_function)


# an example which compute the time a function used
import time

def timing_function(some_function):
    """
    Outputs the time a function takes to execute.
    """

    def wrapper():
        t1 = time.time()
        some_function()
        t2 = time.time()
        return "Time it took to run the function: " + str((t2 - t1)) + "\n"
    return wrapper

@timing_function
def my_function():
    num_list = []
    for num in (range(0, 10000)):
        num_list.append(num)
    print("\nSum of all the numbers: " + str((sum(num_list))))

print(my_function())


