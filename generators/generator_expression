
# The major difference between a list comprehension and a generator expression is that while list comprehension 
produces the entire list, generator expression produces one item at a time.

my_list = [1, 3, 6, 10]
[x**2 for x in my_list]

# same thing can be done using generator expression
# Output: <generator object <genexpr> at 0x0000000002EBDAF8>
(x**2 for x in my_list)

# Output: 1
print(next(a))

# Output: 9
print(next(a))

# Output: 36
print(next(a))

# Output: 100
print(next(a))

# Output: StopIteration
next(a)

# Suppose we have a log file from a famous fast food chain. The log file has a column (4th column) that keeps track 
# of the number of pizza sold every hour and we want to sum it to find the total pizzas sold in 5 years.

# Assume everything is in string and numbers that are not available are marked as 'N/A'. A generator implementation 
# of this could be as follows.

with open('sells.log') as file:
    pizza_col = (line[3] for line in file)
    per_hour = (int(x) for x in pizza_col if x != 'N/A')
    print("Total pizzas sold = ",sum(per_hour))
    
    
