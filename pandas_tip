# for boxplot

import re
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

exprM = pd.read_csv("PRJNA293943_txi_scaledTPM.csv", sep=",", header=0, index_col=0)
exprM2_log = np.log2(1 + exprM)
exprM2_log.boxplot(rot=90)
plt.show()
>>>

# extract expression for common genes
exprM_GSE2658 = pd.read_csv("GSE2658_quantile_norm.csv", sep=",", header=0, index_col=0)
exprM_GSE2658.shape
exprM_GSE9782 = pd.read_csv("GSE9782_combined_gene_symbol.csv", sep=",", header=0, index_col=0)
exprM_GSE9782.shape
genes_GSE2658 = exprM_GSE2658.index.tolist()
genes_GSE9782 = exprM_GSE9782.index.tolist()
common_genes = sorted(list(set(genes_GSE2658) & set(genes_GSE9782)))
common_genes[0:5]
len(common_genes)
exprM_GSE2658_common = exprM_GSE2658.loc[common_genes]
exprM_GSE2658_common.shape
exprM_GSE9782_common = exprM_GSE9782.loc[common_genes]
exprM_GSE9782_common.shape
exprM_GSE9782_common.to_csv("GSE9782_combat0.csv", index = True, header=True)
exprM_GSE2658_common.to_csv("GSE2658_combat0.csv", index = True, header=True)


# remove 2_BM, 3_BM, and 4_BM form coMMpass and extract lincRNA from coMMpass
exprM = pd.read_csv("MMRF_CoMMpass_IA13a_E74GTF_Salmon_Gene_TPM.txt", sep="\t", header=0, index_col=0)
lncRNA= pd.read_csv("MM_lincRNA_list.csv", sep=",", header=0, index_col=0)

samples1 = exprM.columns
samples2 = [s for s in samples1 if re.search("_1_BM", s)]

lncRNA_id = [lnc  for lnc in lncRNA.index if re.match("ENSG", str(lnc)) ] 

exprM2 = exprM[samples2]
exprM2_log = np.log2(1+exprM2)
lincRNA_exprM2_log = exprM2_log.loc[lncRNA_id] 

lincRNA_exprM2_log.T.boxplot(rot = 90)
plt.show()  
plt.savefig(fname= "coMMpass_lincRNA_boxplot.jpg",format="jpg" )


# for other dataset
exprM = pd.read_csv("PRJNA478148_txi_scaledTPM.csv", sep=",", header=0, index_col=0)
lncRNA= pd.read_csv("MM_lincRNA_list.csv", sep=",", header=0, index_col=0)
exprM2_log = np.log2(1+exprM)
lncRNA_id = [lnc  for lnc in lncRNA.index if re.match("ENSG", str(lnc)) ]
lincRNA_exprM2_log = exprM2_log.loc[lncRNA_id]
 
lincRNA_exprM2_log.T.boxplot(rot = 90)
plt.show()
lincRNA_exprM2_log.T.boxplot(rot = 90)
plt.savefig(fname= "PRJNA478148_lincRNA_boxplot.jpg",format="jpg" )
plt.show()
 
# sample with outliers
#

exprM = pd.read_csv("PRJNA293943_txi_scaledTPM.csv", sep=",", header=0, index_col=0)
samples1 = exprM.columns
outliers = []
with open("sample_outliers.txt") as infile:
    for line in infile:
        line = line.rstrip()
        outliers.append(line)
samples2 = [s for s in samples1 if s not in outliers ]

lncRNA= pd.read_csv("MM_lincRNA_list.csv", sep=",", header=0, index_col=0)
lncRNA_id = [lnc  for lnc in lncRNA.index if re.match("ENSG", str(lnc)) ]
exprM2 = exprM[samples2]
exprM2_log = np.log2(1+exprM2)

lincRNA_exprM2_log = exprM2_log.loc[lncRNA_id]
lincRNA_exprM2_log.T.boxplot(rot = 90)

plt.show()

import re
import pandas as pd

bin_group = pd.read_csv("bin_mtx_GSE9782.csv", sep=',', header=0, index_col=0)
bin_group.head()
exprM    = pd.read_csv("MMRF_coMMpass_Gene_counts_uniqsymbol_log_high_expressed2.csv", sep=',', header=0, index_col=0)
lincRNA0 = pd.read_csv("gencode.v29.lincRNA.csv", sep=",", header=0, index_col=0) 
genes    = exprM.index.tolist()
lincRNA1 = lincRNA0.index.tolist()
samples1 = exprM.columns
samples2 = lincRNA0.columns

survive   = pd.read_csv("GSE9782_Bortezomib_overallsurvive.txt",  sep='\t', header=0, index_col=0)
survive.head()  

bin_grup_index = bin_group.index.tolist()
survive_index  = survive.index.tolist()

samples = sorted(list(set(bin_grup_index) & set(survive_index)))
survive_out = survive.loc[samples]
bin_group_out = bin_group.loc[samples]

df_out1 = pd.concat([survive_out,bin_group_out], axis=1, ignore_index=False, sort=False)

tfs = pd.read_csv("tf_freq_summary.txt",  sep='\t')
tfs1 = tfs[tfs.freq>6] 
tfs1.head()
tfs2 = tfs1.tf.tolist()
tfs3 = [ x+"(+)" for x in tfs2]  

bin_tf =  list(bin_group)
common_tf = sorted(list(set(bin_tf) & set(tfs3 ))) 

col_out = common_tf.insert(0, "time")
col_out = common_tf.insert(0, "event")
df_out2 = df_out1[common_tf]
df_out2.to_csv("GSE9782_scenic_bin_grp_os.csv", index = True, header=True)

