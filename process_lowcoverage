
# run bam-readcount
# bam-readcount -f ~/resource/hg19/hg19.fa ~/ActionableMut/1S13-083121FM_S1.bam -l ~/ActionableMut/first3.bed
# bed :
import sys
import os
import re
import itertools


bedfile_coverage = "/home/yliu/process_Aug2017/coverage/indel_Mar16.bed"
cutoff_lowcoverage = 60
cutoff_lowcovLength = 5

def ranges(i):   # given the set {0, 1, 2, 3, 4, 7, 8, 9, 11} ===> { {0,4}, {7,9}, {11,11} }
    for a, b in itertools.groupby(enumerate(i), lambda (x, y): y - x):
        b = list(b)
        yield b[0][1], b[-1][1]

#chr2    29443611        T       1753
def extractLowPosition(infile, cutoff):
    inf = open(infile, "r")
    outHash = {}
    for line in inf.readlines():
        line = line.rstrip("\n")
        temp = line.split("\t")
        if(int(temp[3]) <= cutoff):
            if(temp[0] in outHash):
                outHash[temp[0]] = outHash[temp[0]] +"\t" + temp[1]
            else:
                outHash[temp[0]] = temp[1]
    return outHash

def getRange(inHash):
    outHash = {}
    for k in inHash:
        temp  = set(map(int,inHash[k].split("\t")))
        list1 = ranges(temp)
        outHash[k] = list1
    return outHash


def runBamReadcount_lowcoverage(bam, bed = bedfile_coverage, cutoff_length = cutoff_lowcovLength):
    os.system("bam-readcount -f ~/resource/hg19/hg19.fa -l " + bed + " " + bam +">bam-readcount_out.txt" )
    hash_1 = extractLowPosition("bam-readcount_out.txt", cutoff_lowcoverage)
    hash_2 = getRange(hash_1)

    outfile = re.sub(r".bam", "_lowcoverage.txt", bam)
    outf = open(outfile, "w")
    for k in hash_2:
        for r in hash_2[k]:
            if(r[1]- r[0] >= cutoff_length):
                outf.write(str(k)+":"+str(r[0])+"-"+str(r[1])+"\n" )


#script, bam = sys.argv

#runBamReadcount_lowcoverage(bam, bedfile_coverage, cutoff_lowcovLength)

