#jvva -Xmx4g -jar snpEff.jar -v -stats ex1.html hg19  protocols/ex1.vcf > protocols/ex1.ann.vcf

import re
import sys
import os

Quality_threshold    = 95
Read_depth           = 65

def parseSnpEff(infile):    # output is a list of hash
    inf = open(infile, "r")
    outList = []
    for line in inf.readlines():
        if(filter_lowQC(line)):
            continue
        temp1 = line.split("\t")
        map_location = str(temp1[0])+":"+str(temp1[1])
        Read_depth   = getDepth(temp1)
        temp7 = temp1[7].split(";")
        for info in temp7:
            if(re.search("^ANN", info)):
                outList.append(parseAnn(info, map_location, Read_depth))

    return outList

def filter_lowQC(line):
    if(re.search("\#", line)):
        return 1
    temp = line.split("\t")
    if(temp[5] < Quality_threshold or temp[6] != "PASS"):
        return 1
    return 0

def parseAnn(info, ml, dp):
    out = []
    if(re.search(",", info)):
        anns = info.split(",")
        for ann in anns:
            out.append(getAnn(ann, ml, dp))
    else:
        out.append(getAnn(info, ml, dp))
    return out

def getDepth(temp0):
    temp = temp0[7].split(";")
    for info in temp:
        if(re.search("^DP", info)):
            dplist = info.split("=")
            return(str(dplist[1]))

def getAnn(ann, ml, dp):
    outHash = {}
    temp = ann.split("|")
    outHash["readDepth"] = dp
    outHash["map_location"] = ml
    outHash["geneName"] = temp[3]
    outHash["transccrpt"] = temp[6]
    outHash["codingSeqChange"] = temp[9].split(".")[1]
    outHash["variantLocation"] = temp[6]+":"+temp[9]
    if(re.search(".", temp[10])):
        outHash["proteinChange"] = temp[10].split(".")[1]
    else:
        outHash["proteinChange"] = temp[10]
    outHash["variantName"] = temp[3]+"_"+temp[10]
    outHash["molConseq"] = temp[1]
    return outHash

script, infile = sys.argv
outfile = infile
outfile = re.sub("vcf$", "txt", outfile)
annoList = parseSnpEff(infile)

flat_list = [item for sublist in annoList for item in sublist]

outf = open(outfile, "w")
for anno in  flat_list:
    outf.write("sequencing\t"+anno["geneName"]+"\t"+anno["map_location"]+"\t"+anno["transccrpt"]+"\t"+anno["codingSeqChange"]+"\t")
    outf.write(anno["variantLocation"]+"\t"+anno["proteinChange"]+"\t"+anno["variantName"]+"\tshort-variant\tseq\tmiSeq\tpositive\t\t\t"+anno["readDepth"]+"\n")

